// main.js - Crash Fix for Pause Button

// --- Title Screen Scene (Now also the main Preloader) ---
class TitleScene extends Phaser.Scene {
Â  Â  constructor() {
Â  Â  Â  Â  super({ key: 'TitleScene' });
Â  Â  }

Â  Â  preload() {
Â  Â  Â  Â  // --- ALL GAME ASSETS ARE NOW LOADED HERE ---
Â  Â  Â  Â  this.load.image('background', 'graveyard.png');Â 
Â  Â  Â  Â  this.load.svg('balloon_asset', '40.svg', { width: 30, height: 30 });
Â  Â  Â  Â  this.load.svg('title_logo', 'title_logo.svg', { width: 450, height: 120 });
Â  Â  Â  Â  this.load.svg('rules_button', 'rules.svg', { width: 80, height: 40 });
Â  Â  Â  Â  this.load.svg('rules_hover', 'rules_hover.svg', { width: 80, height: 40 });
Â  Â  Â  Â  this.load.svg('play_button', 'play.svg', { width: 80, height: 40 });
Â  Â  Â  Â  this.load.svg('play_hover', 'play_hover.svg', { width: 80, height: 40 });
Â  Â  Â  Â  this.load.svg('rules_panel', 'rules_panel.svg', { width: 1440, height: 600 });

Â  Â  Â  Â  // Game assets
Â  Â  Â  Â  this.load.image('zombie', 'zombie.png');
Â  Â  Â  Â  this.load.image('ghost', 'ghost.png');
Â  Â  Â  Â  this.load.image('witch', 'witch.png');
Â  Â  Â  Â  this.load.image('bat', 'bat.png');
Â  Â  Â  Â  this.load.image('hand', 'hand.png');Â 
Â  Â  Â  Â  this.load.image('reward', 'reward.png');
Â  Â  Â  Â  this.load.image('ui_frame', 'ui_frame.png');
Â  Â  Â  Â  this.load.image('ui_power_dash', 'power.png');
Â  Â  Â  Â  this.load.bitmapFont('ui_font', 'ui_font.png', 'ui_font.fnt');
Â  Â  Â  Â Â 
Â  Â  Â  Â  // Audio assets
Â  Â  Â  Â  this.load.audio('ambient_loop', '90.mp3');
Â  Â  Â  Â  this.load.audio('owl_hoot', '89.mp3');
Â  Â  Â  Â  this.load.audio('intro', 'intro.mp3');
Â  Â  Â  Â  this.load.audio('cackle', 'cackle.mp3');
Â  Â  Â  Â  this.load.audio('moan', 'moan.mp3');
Â  Â  Â  Â  this.load.audio('boo', 'boo.mp3');
Â  Â  Â  Â  this.load.audio('zombie_die', 'zombie_die.mp3');
Â  Â  Â  Â  this.load.audio('ghost_die', 'ghost_die.mp3');
Â  Â  Â  Â  this.load.audio('witch_die', 'witch_die.mp3');
Â  Â  Â  Â  this.load.audio('bat_die', 'bat_die.mp3');
Â  Â  Â  Â  this.load.audio('bat', 'bat.mp3');
Â  Â  }

Â  Â  create() {
Â  Â  Â  Â  this.time.removeAllEvents();Â 
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.add.image(360, 150, 'background').setOrigin(0.5, 0.5);

Â  Â  Â  Â  this.add.image(360, 100, 'title_logo').setOrigin(0.5, 0.5);Â 
Â  Â  Â  Â Â 
Â  Â  Â  Â  const rulesButton = this.add.image(250, 240, 'rules_button')
Â  Â  Â  Â  Â  Â  .setInteractive({ useHandCursor: true });
Â  Â  Â  Â Â 
Â  Â  Â  Â  const startButton = this.add.image(470, 240, 'play_button')
Â  Â  Â  Â  Â  Â  .setInteractive({ useHandCursor: true });
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.overlayContainer = this.add.container(360, 150);
Â  Â  Â  Â Â 
Â  Â  Â  Â  const rulesPanel = this.add.image(0, 0, 'rules_panel')
Â  Â  Â  Â  Â  Â  .setOrigin(0.5, 0.5)
Â  Â  Â  Â  Â  Â  .setDisplaySize(720, 300);Â 
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  this.overlayContainer.add(rulesPanel);
Â  Â  Â  Â  this.overlayContainer.setVisible(false);Â 
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.titleMusic = this.sound.add('ambient_loop', { loop: true, volume: 0.2 });
Â  Â  Â  Â  this.titleMusic.play();

Â  Â  Â  Â  this.time.addEvent({
Â  Â  Â  Â  Â  Â  delay: Phaser.Math.Between(3000, 8000),Â 
Â  Â  Â  Â  Â  Â  callback: () => {
Â  Â  Â  Â  Â  Â  Â  Â  this.sound.play('owl_hoot', { volume: 0.5 });
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  loop: true
Â  Â  Â  Â  });

Â  Â  Â  Â  const handleHover = (button, hoverKey, releasedKey) => {
Â  Â  Â  Â  Â  Â  button.on('pointerover', () => button.setTexture(hoverKey));
Â  Â  Â  Â  Â  Â  button.on('pointerout', () => button.setTexture(releasedKey));
Â  Â  Â  Â  Â  Â  button.on('pointerup', () => button.setTexture(releasedKey));
Â  Â  Â  Â  };
Â  Â  Â  Â Â 
Â  Â  Â  Â  handleHover(rulesButton, 'rules_hover', 'rules_button');
Â  Â  Â  Â  rulesButton.on('pointerdown', () => {
Â  Â  Â  Â  Â  Â  rulesButton.setTexture('rules_hover');
Â  Â  Â  Â  Â  Â  this.overlayContainer.setVisible(!this.overlayContainer.visible);
Â  Â  Â  Â  });

Â  Â  Â  Â  handleHover(startButton, 'play_hover', 'play_button');
Â  Â  Â  Â Â 
Â  Â  Â  Â  startButton.on('pointerdown', () => {
Â  Â  Â  Â  Â  Â  startButton.setTexture('play_hover');
Â  Â  Â  Â  Â  Â  this.sound.play('intro');

Â  Â  Â  Â  Â  Â  this.time.delayedCall(100, () => {
Â  Â  Â  Â  Â  Â  Â  Â  this.sound.stopByKey('ambient_loop');
Â  Â  Â  Â  Â  Â  Â  Â  this.time.removeAllEvents();Â 
Â  Â  Â  Â  Â  Â  Â  Â  this.scene.start('GameScene');
Â  Â  Â  Â  Â  Â  }, [], this);
Â  Â  Â  Â  });
Â  Â  }
Â  Â Â 
Â  Â  shutdown() {
Â  Â  Â  Â  this.sound.stopAll();
Â  Â  }
}


// --- Game Scene Class ---
class GameScene extends Phaser.Scene {
Â  Â  constructor() {
Â  Â  Â  Â  super({ key: 'GameScene' });
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.GRAVE_POSITIONS_DEFAULT = [
Â  Â  Â  Â  Â  Â  {x: 160, y: 120, isOccupied: false},Â 
Â  Â  Â  Â  Â  Â  {x: 568, y: 120, isOccupied: false}Â 
Â  Â  Â  Â  ];
Â  Â  Â  Â  this.CHARACTER_SPECS = {
Â  Â  Â  Â  Â  Â  zombie: { key: 'zombie', speed: 50, points: 5, scale: 0.5 },Â 
Â  Â  Â  Â  Â  Â  ghost:Â  { key: 'ghost',Â  speed: 0,Â  points: 10, scale: 0.5 },
Â  Â  Â  Â  Â  Â  witch:Â  { key: 'witch',Â  speed: 180, points: 20, scale: 0.42 },Â 
Â  Â  Â  Â  Â  Â  bat:Â  Â  { key: 'bat',Â  Â  speed: 0,Â  points: 0,Â  reward: 5, scale: 0.5 }
Â  Â  Â  Â  };
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.HAND_FIXED_Y = 280;Â 
Â  Â  Â  Â  this.RISE_HEIGHT = 40;Â 
Â  Â  Â  Â  this.RISE_TIME_FRAMES = 30;Â 
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.UI_PANEL_WIDTH = 60;
Â  Â  Â  Â  this.BORDER_THICKNESS = 8;
Â  Â  }

Â  Â  init() {
Â  Â  Â  Â  this.gameState = {
Â  Â  Â  Â  Â  Â  score: 0, level: 1, ammo: 10, isAiming: false, power: 0,
Â  Â  Â  Â  Â  Â  powerDirection: 1, characters: null, projectiles: null, hand: null,
Â  Â  Â  Â  Â  Â  isGameOver: false, isPaused: false, batSpawnLocked: true, canFire: true,
Â  Â  Â  Â  Â  Â  scoreText: null, levelText: null, ammoText: null, powerDash: null,
Â  Â  Â  Â  Â  Â  pauseButton: null, ambientMusic: null,
Â  Â  Â  Â  Â  Â  handClampX: 0
Â  Â  Â  Â  };
Â  Â  Â  Â  this.GRAVE_POSITIONS = JSON.parse(JSON.stringify(this.GRAVE_POSITIONS_DEFAULT));
Â  Â  }

Â  Â  preload() {
Â  Â  Â  Â  // All assets are loaded in TitleScene
Â  Â  }

Â  Â  create() {
Â  Â  Â  Â  this.gameState.ambientMusic = this.sound.add('ambient_loop', { loop: true, volume: 1.0 });Â 
Â  Â  Â  Â  this.gameState.ambientMusic.play();
Â  Â  Â  Â  this.add.image(360, 150, 'background').setOrigin(0.5, 0.5);
Â  Â  Â  Â  this.physics.world.setBounds(0, 0, 720, 300);
Â  Â  Â  Â  this.physics.world.on('worldbounds', this.onBalloonOut, this);
Â  Â  Â  Â  this.gameState.projectiles = this.physics.add.group();
Â  Â  Â  Â Â 
Â  Â  Â  Â  // --- UI REWORK ---
Â  Â  Â  Â  this.add.image(0, 0, 'ui_frame').setOrigin(0,0).setDepth(50);
Â  Â  Â  Â Â 
Â  Â  Â  Â  const meterX = this.scale.width - 21;
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.meterTopY = 122;
Â  Â  Â  Â  this.meterBottomY = 282;
Â  Â  Â  Â  this.meterRange = this.meterBottomY - this.meterTopY;

Â  Â  Â  Â  this.gameState.powerDash = this.add.sprite(meterX, this.meterBottomY, 'ui_power_dash').setDepth(51).setVisible(false);
Â  Â  Â  Â Â 
Â  Â  Â  Â  // --- SCORE UI (Title and Value) ---
Â  Â  Â  Â  this.add.text(meterX, 17, "SCORE", { fontSize: '8px', fill: '#FFFFFF', fontFamily: 'Archivo Narrow', align: 'center' }).setOrigin(0.5).setDepth(53);
Â  Â  Â  Â  this.gameState.scoreText = this.add.text(meterX, 35, "0", { fontSize: '16px', fill: '#FFA500', fontFamily: 'Archivo Narrow', align: 'center' }).setOrigin(0.5).setDepth(53);

Â  Â  Â  Â  // --- LEVEL UI (Title and Value) ---
Â  Â  Â  Â  this.add.text(meterX, 60, "LEVEL", { fontSize: '8px', fill: '#FFFFFF', fontFamily: 'Archivo Narrow', align: 'center' }).setOrigin(0.5).setDepth(53);
Â  Â  Â  Â  this.gameState.levelText = this.add.text(meterX, 80, "1", { fontSize: '16px', fill: '#FFA500', fontFamily: 'Archivo Narrow', align: 'center' }).setOrigin(0.5).setDepth(53);

Â  Â  Â  Â  this.pauseButton = this.add.bitmapText(20, 25, 'ui_font', '||', 20).setOrigin(0, 0.5).setInteractive({ useHandCursor: true }).setDepth(100);
Â  Â  Â  Â  this.pauseButton.on('pointerdown', this.togglePause, this);
Â  Â  Â  Â  this.muteButton = this.add.text(35, 18, 'ðŸ”Š', { fontSize: '18px', fill: '#FFFFFF', padding: {x: 5, y: 2} }).setOrigin(0, 0).setInteractive({ useHandCursor: true }).setDepth(100);
Â  Â  Â  Â  this.muteButton.on('pointerdown', this.toggleMute, this);Â 
Â  Â  Â  Â  this.gameState.ammoText = this.add.bitmapText(75, 27, 'ui_font', `AMMO: ${this.gameState.ammo}`, 22).setOrigin(0, 0.5).setDepth(100);
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.gameState.hand = this.add.sprite(360, 300, 'hand').setOrigin(0.5, 0.5).setScale(0.45).setDepth(20);Â 
Â  Â  Â  Â  this.gameState.handClampX = this.scale.width - 60 - 8;
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.gameState.hand.y = this.HAND_FIXED_Y;
Â  Â  Â  Â  this.gameState.characters = this.physics.add.group();
Â  Â  Â  Â  this.input.on('pointerdown', this.startAim, this);
Â  Â  Â  Â  this.input.on('pointerup', this.throwBalloon, this);
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.time.addEvent({ delay: Phaser.Math.Between(2000, 3500), callback: this.spawnSpecialCharacter, callbackScope: this, loop: true });
Â  Â  Â  Â  this.time.addEvent({ delay: Phaser.Math.Between(2500, 4000), callback: this.checkAndSpawnZombie, callbackScope: this, loop: true });

Â  Â  Â  Â Â 
Â  Â  Â  Â  if (this.physics.world.debug) {
Â  Â  Â  Â  	// If in debug mode, unlock bat spawning immediately.
Â  Â  Â  Â  	this.gameState.batSpawnLocked = false;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  	// Otherwise, use the standard 12-second delay.
Â  Â  Â  Â  	this.time.delayedCall(12000, () => { this.gameState.batSpawnLocked = false; }, [], this);
Â  Â  	}
Â  Â  Â  Â  this.physics.add.overlap(this.gameState.projectiles, this.gameState.characters, this.hitCharacter, null, this);
Â  Â  }

Â  Â  update() {
Â  Â  Â  Â  if(this.gameState.isGameOver || this.gameState.isPaused) return;
Â  Â  Â  Â Â 
Â  Â  Â  Â  this.gameState.hand.x = Phaser.Math.Clamp(this.input.activePointer.x, 8, this.gameState.handClampX);
Â  Â  Â  Â  this.gameState.hand.y = this.HAND_FIXED_Y;Â 

Â  Â  Â  Â  if (this.gameState.isAiming) {
Â  Â  Â  Â  Â  Â  this.gameState.power += this.gameState.powerDirection * 3;Â 
Â  Â  Â  Â  Â  Â  if (this.gameState.power >= 100) { this.gameState.power = 100; this.gameState.powerDirection = -1; }Â 
Â  Â  Â  Â  Â  Â  else if (this.gameState.power <= 0) { this.gameState.power = 0; this.gameState.powerDirection = 1; }
Â  Â  Â  Â  Â  Â  this.drawPowerMeter();Â 
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.gameState.powerDash.setVisible(false);
Â  Â  Â  Â  }
Â  Â  Â  Â  this.gameState.scoreText.setText(this.gameState.score);

Â  Â  Â  Â  this.gameState.ammoText.setText(`AMMO: ${this.gameState.ammo}`);
Â  Â  Â  Â  this.gameState.levelText.setText(this.gameState.level);

Â  Â  Â  Â  this.gameState.projectiles.children.iterate((balloon) => {
Â  Â  Â  Â  Â  Â  if (balloon && balloon.canDamage && balloon.body.velocity.y > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  balloon.canDamage = false;
Â  Â  Â  Â  Â  Â  Â  Â  balloon.setTint(0x808080);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });

Â  Â  Â  Â  if (this.gameState.ammo <= 0 && this.gameState.projectiles.getLength() === 0) { this.triggerGameOver(); }
Â  Â  Â  Â  this.gameState.characters.children.iterate((char) => {
Â  Â  Â  Â  Â  Â  if (char && char.active) {
Â  Â  Â  Â  Â  Â  Â  Â  if (char.type === 'ghost') { this.updateGhost(char); }Â 
Â  Â  Â  Â  Â  Â  Â  Â  else if (char.type === 'bat') { this.updateBat(char); }
Â  Â  Â  Â  Â  Â  Â  Â  if (char.type === 'zombie' && !char.isTweening) { this.addZombieBobTween(char); }
Â  Â  Â  Â  Â  Â  Â  Â  if (char.x < -30 || char.x > 750 || char.y < -30 || char.y > 400) { char.destroy(); }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  }
Â  Â Â 
Â  Â  addZombieBobTween(zombie) {
Â  Â  Â  Â  zombie.isTweening = true;
Â  Â  Â  Â  this.tweens.add({ targets: zombie, y: zombie.y - 5, duration: 500, ease: 'Sine.easeInOut', yoyo: true, repeat: -1, onStop: () => { zombie.isTweening = false; } });
Â  Â  }

Â  Â  onBalloonOut(body) { body.gameObject.destroy(); }

Â  Â  toggleMute() {
Â  Â  Â  Â  if (this.sound.mute) { this.sound.mute = false; this.muteButton.setText('ðŸ”Š'); }Â 
Â  Â  Â  Â  else { this.sound.mute = true; this.muteButton.setText('ðŸ”‡'); }
Â  Â  }

Â  Â  togglePause() {
Â  Â  Â  Â  this.gameState.isPaused = !this.gameState.isPaused;
Â  Â  Â  Â  if (this.gameState.isPaused) {
Â  Â  Â  Â  Â  Â  this.physics.pause(); this.tweens.pauseAll(); this.sound.pauseAll();Â 
Â  Â  Â  Â  Â  Â  this.pauseButton.setText('>');Â 
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.physics.resume(); this.tweens.resumeAll(); this.sound.resumeAll();
Â  Â  Â  Â  Â  Â  this.pauseButton.setText('||');
Â  Â  Â  Â  }
Â  Â  }

Â  Â  triggerGameOver() {
Â  Â  Â  Â  this.sound.stopAll();
Â  Â  Â  Â  this.gameState.isGameOver = true;
Â  Â  Â  Â  this.time.removeAllEvents();Â 
Â  Â  Â  Â  this.add.rectangle(360, 150, 720, 300, 0x000000, 0.7).setOrigin(0.5).setDepth(99);Â 
Â  Â  Â  Â  this.add.text(360, 50, 'Monster Splash', { fontSize: '48px', fill: '#FFD700', stroke: '#800080', strokeThickness: 8, fontFamily: 'Archivo Narrow' }).setOrigin(0.5).setDepth(100);
Â  Â  Â  Â  this.add.text(360, 130, `Final Score: ${this.gameState.score}`, { fontSize: '28px', fill: '#FFFFFF', fontFamily: 'Archivo Narrow' }).setOrigin(0.5).setDepth(100);
Â  Â  Â  Â  const restartButton = this.add.text(360, 220, 'RESTART', { fontSize: '32px', fill: '#00FF00', backgroundColor: '#303030', padding: { x: 20, y: 10 }, fontFamily: 'Archivo Narrow' }).setOrigin(0.5).setDepth(100).setInteractive({ useHandCursor: true });
Â  Â  Â  Â  restartButton.on('pointerdown', () => { this.scene.start('TitleScene'); });
Â  Â  Â  Â  this.gameState.characters.children.iterate((char) => { if (char && char.body) { char.body.enable = false; } });
Â  Â  }

Â  Â  drawPowerMeter() {
Â  Â  Â  Â  this.gameState.powerDash.setVisible(true);
Â  Â  Â  Â  const yPos = Phaser.Math.Linear(this.meterBottomY, this.meterTopY, this.gameState.power / 100);
Â  Â  Â  Â  this.gameState.powerDash.setY(yPos);
Â  Â  }

Â  Â  updateGhost(ghost) {
Â  Â  Â  Â  if (!ghost.state) {Â 
Â  Â  Â  Â  Â  Â  ghost.y += ghost.height * ghost.scaleY;Â 
Â  Â  Â  Â  Â  Â  ghost.state = 'rising';Â 
Â  Â  Â  Â  Â  Â  ghost.riseTargetY = ghost.y - this.RISE_HEIGHT;Â 
Â  Â  Â  Â  Â  Â  ghost.pauseTimer = Phaser.Math.RND.between(90, 150);
Â  Â  Â  Â  Â  Â  ghost.lateralSpeed = Phaser.Math.RND.between(-20, 20);Â 
Â  Â  Â  Â  Â  Â  ghost.setVelocityX(ghost.lateralSpeed);
Â  Â  Â  Â  Â  Â  ghost.alpha = 0.0;
Â  Â  Â  Â  Â  Â  ghost.setScale(0);Â 
Â  Â  Â  Â  Â  Â  ghost.soundPlayed = false;
Â  Â  Â  Â  }
Â  Â  Â  Â  if (ghost.state === 'rising') {
Â  Â  Â  Â  Â  Â  const framesRemaining = (ghost.y - ghost.riseTargetY) / (this.RISE_HEIGHT / this.RISE_TIME_FRAMES);
Â  Â  Â  Â  Â  Â  ghost.y -= this.RISE_HEIGHT / this.RISE_TIME_FRAMES;Â 
Â  Â  Â  Â  Â  Â  const progress = (this.RISE_TIME_FRAMES - framesRemaining) / this.RISE_TIME_FRAMES;
Â  Â  Â  Â  Â  Â  const easedProgress = Phaser.Math.Easing.Sine.Out(progress);
Â  Â  Â  Â  Â  Â  ghost.alpha = Phaser.Math.Clamp(easedProgress, 0, 1.0);
Â  Â  Â  Â  Â  Â  ghost.setScale(Phaser.Math.Clamp(easedProgress, 0, 1.0) * this.CHARACTER_SPECS.ghost.scale);

Â  Â  Â  Â  Â  Â  if (progress >= 0.3 && !ghost.soundPlayed) { ghost.soundPlayed = true; }Â 
Â  Â  Â  Â  Â  Â  if (ghost.y <= ghost.riseTargetY) {Â 
Â  Â  Â  Â  Â  Â  Â  Â  ghost.y = ghost.riseTargetY;Â 
Â  Â  Â  Â  Â  Â  Â  Â  ghost.state = 'pausing';Â 
Â  Â  Â  Â  Â  Â  Â  Â  ghost.setVelocityX(ghost.lateralSpeed / 4);Â 
Â  Â  Â  Â  Â  Â  Â  Â  ghost.setScale(this.CHARACTER_SPECS.ghost.scale);Â 
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } else if (ghost.state === 'pausing') {
Â  Â  Â  Â  Â  Â  ghost.alpha = 1.0;Â 
Â  Â  Â  Â  Â  Â  ghost.pauseTimer--;
Â  Â  Â  Â  Â  Â  if (ghost.pauseTimer <= 0) { ghost.state = 'fading'; ghost.setVelocityX(0); }
Â  Â  Â  Â  } else if (ghost.state === 'fading') {
Â  Â  Â  Â  Â  Â  ghost.y -= 3;Â 
Â  Â  Â  Â  Â  Â  ghost.alpha -= 0.05;
Â  Â  Â  Â  Â  Â  if (ghost.alpha <= 0) { this.GRAVE_POSITIONS[ghost.graveIndex].isOccupied = false; ghost.destroy(); }
Â  Â  Â  Â  }
Â  Â  }

Â  Â  updateBat(bat) {
Â  Â  Â  Â  if (!bat.state) {
Â  Â  Â  Â  Â  Â  bat.state = 'waiting';
Â  Â  Â  Â  Â  Â  const holdDuration = Phaser.Math.Between(2800, 3500);Â 
Â  Â  Â  Â  Â  Â  this.time.delayedCall(holdDuration, () => {Â 
Â  Â  Â  Â  Â  Â  Â  Â  if (bat.active) {Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  bat.state = 'flying';Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  bat.setVelocityY(-400);Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.sound.play('bat', { volume: 1.0 });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({ targets: bat, angle: 10, duration: 80, yoyo: true, repeat: -1 });
Â  Â  Â  Â  Â  Â  Â  Â  }Â 
Â  Â  Â  Â  Â  Â  }, [], this);
Â  Â  Â  Â  }
Â  Â  }
Â  Â Â 
Â  Â  checkAndSpawnZombie() {
Â  Â  Â  Â  if (this.gameState.isGameOver || this.gameState.isPaused) return;

Â  Â  Â  Â  const zombieCount = this.gameState.characters.children.getArray().filter(char => char.type === 'zombie').length;
Â  Â  Â  Â  if (zombieCount < 2) {
Â  Â  Â  Â  Â  Â  this.spawnZombie();
Â  Â  Â  Â  }
Â  Â  }
Â  Â Â 
Â  Â  spawnZombie() {
Â  Â  Â  Â  const spec = this.CHARACTER_SPECS.zombie;
Â  Â  Â  Â  const startSide = Phaser.Math.RND.pick([-1, 1]);
Â  Â  Â  Â  const x = (startSide === 1) ? -10 : 730;Â 
Â  Â  Â  Â  const y = 300 + 30;
Â  Â  Â  Â  const newChar = this.gameState.characters.create(x, y, 'zombie');Â 
Â  Â  Â  Â  if (!newChar) return;

Â  Â  Â  Â  this.addZombieBobTween(newChar);Â 
Â  Â  Â  Â  newChar.setVelocityX(startSide * spec.speed);
Â  Â  Â  Â  if (startSide === -1) { newChar.setFlipX(true); }
Â  Â  Â  Â  this.sound.play('moan', { volume: 0.3, detune: Phaser.Math.Between(-200, 200) });
Â  Â  Â  Â  newChar.setScale(spec.scale).setOrigin(0.5, 1);
Â  Â  Â  Â  newChar.refreshBody();
Â  Â  Â  Â  newChar.setDepth(5);
Â  Â  Â  Â  newChar.body.setImmovable(false).setAllowGravity(false);Â 
Â  Â  Â  Â  newChar.type = spec.key;
Â  Â  Â  Â  newChar.points = spec.points;
Â  Â  }

Â  Â  spawnSpecialCharacter() {
Â  Â  Â  Â  if (this.gameState.characters.getLength() >= 4) return;
Â  Â  Â  Â  if(this.gameState.isGameOver) return;
Â  Â  Â  Â  const roll = Phaser.Math.RND.between(1, 100);
Â  Â  Â  Â  let specKey = null;
Â  Â  Â  Â  if (roll < 60) { specKey = 'ghost'; }Â 
Â  Â  Â  Â  else if (roll < 85) { specKey = 'witch'; }Â 
Â  Â  Â  Â  else if (!this.gameState.batSpawnLocked) { specKey = 'bat'; }
Â  Â  Â  Â  else { return; }Â 
Â  Â  Â  Â Â 
Â  Â  Â  Â  let x, y, newChar;
Â  Â  Â  Â  let startSide = Phaser.Math.RND.pick([-1, 1]);Â 
Â  Â  Â  Â  const spec = this.CHARACTER_SPECS[specKey];

Â  Â  Â  Â  if (specKey === 'ghost') {
Â  Â  Â  Â  Â  Â  const availableGraves = this.GRAVE_POSITIONS.filter(g => !g.isOccupied);
Â  Â  Â  Â  Â  Â  if (availableGraves.length === 0) return;Â 
Â  Â  Â  Â  Â  Â  const grave = Phaser.Math.RND.pick(availableGraves);
Â  Â  Â  Â  Â  Â  grave.isOccupied = true;Â 
Â  Â  Â  Â  Â  Â  newChar = this.gameState.characters.create(grave.x, grave.y, spec.key);
Â  Â  Â  Â  Â  Â  newChar.graveIndex = this.GRAVE_POSITIONS.indexOf(grave);Â 
Â  Â  Â  Â  Â  Â  newChar.roundPixels = true;
Â  Â  Â  Â  } else if (specKey === 'witch') {
Â  Â  Â  Â  Â  Â  x = (startSide === 1) ? -10 : 730;Â 
Â  Â  Â  Â  Â  Â  y = 10;Â 
Â  Â  Â  Â  Â  Â  newChar = this.gameState.characters.create(x, y, spec.key);
Â  Â  Â  Â  Â  Â  newChar.setOrigin(0.5, 0);Â 
Â  Â  Â  Â  Â  Â  newChar.setVelocityX(startSide * spec.speed);
Â  Â  Â  Â  Â  Â  if (startSide === -1) { newChar.setFlipX(true); }
Â  Â  Â  Â  Â  Â  this.sound.play('cackle', { volume: 1.0 });
Â  Â  Â  Â  } else if (specKey === 'bat') {
Â  Â  Â  Â  Â  Â  const batExists = this.gameState.characters.children.getArray().some(char => char.type === 'bat');
Â  Â  Â  Â  Â  Â  if (batExists) return;

Â  Â  Â  Â  Â  Â  const finalX = Phaser.Math.RND.between(100, 620);
Â  Â  Â  Â  Â  Â  const finalY = Phaser.Math.RND.between(50, 100);
Â  Â  Â  Â  Â  Â  const newBat = this.gameState.characters.create(finalX, -30, spec.key);
Â  Â  Â  Â  Â  Â  if (!newBat) return;

Â  Â  Â  Â  Â  Â  newBat.setScale(spec.scale).setOrigin(0.5, 0.5);
Â  Â  Â  Â  Â  Â  newBat.refreshBody();
Â  Â  Â  Â  Â  Â  newBat.body.setCircle(newBat.body.width * 0.8);
Â  Â  Â  Â  Â  Â  newBat.body.setImmovable(false).setAllowGravity(false);
Â  Â  Â  Â  Â  Â  newBat.type = spec.key;
Â  Â  Â  Â  Â  Â  newBat.points = spec.points;
Â  Â  Â  Â  Â  Â  newBat.setDepth(15);
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  this.sound.play('bat', { volume: 1.0 });
Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  targets: newBat,
Â  Â  Â  Â  Â  Â  Â  Â  y: finalY,
Â  Â  Â  Â  Â  Â  Â  Â  duration: 300,
Â  Â  Â  Â  Â  Â  Â  Â  ease: 'Power2'
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }
Â  Â  Â  Â  if (!newChar) return;Â 

Â  Â  Â  Â  newChar.setScale(spec.scale);
Â  Â  Â  Â  if (spec.key !== 'witch') {
Â  Â  Â  Â  Â  Â  newChar.setOrigin(0.5, 1);
Â  Â  Â  Â  }Â 

Â  Â  Â  Â  newChar.refreshBody();

Â  Â  Â  Â  if (spec.key === 'ghost') {
Â  Â  Â  Â  Â  Â  const radius = newChar.body.width * 0.9;
Â  Â  Â  Â  Â  Â  newChar.body.setCircle(radius);
Â  Â  Â  Â  }

Â  Â  Â  Â  if (spec.key === 'ghost') { newChar.setDepth(1); }
Â  Â  Â  Â  else { newChar.setDepth(10); }Â 

Â  Â  Â  Â  newChar.body.setImmovable(false).setAllowGravity(false);Â 
Â  Â  Â  Â  newChar.type = spec.key;
Â  Â  Â  Â  newChar.points = spec.points;
Â  Â  }
Â  Â Â 
Â  Â  startAim(pointer) {
Â  Â  Â  Â  if (this.gameState.ammo > 0 && !this.gameState.isGameOver) {Â 
Â  Â  Â  Â  Â  Â  this.gameState.isAiming = true;
Â  Â  Â  Â  Â  Â  this.gameState.power = 0;
Â  Â  Â  Â  Â  Â  this.gameState.powerDirection = 1;Â 
Â  Â  Â  Â  }
Â  Â  }
Â  Â Â 
Â  Â  throwBalloon(pointer) {
Â  Â  Â  Â  if (this.gameState.isAiming && this.gameState.ammo > 0 && !this.gameState.isGameOver && this.gameState.canFire) {
Â  Â  Â  Â  Â  Â  if (this.gameState.power < 5) { this.gameState.isAiming = false; this.gameState.power = 0; return; }
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  this.gameState.isAiming = false;
Â  Â  Â  Â  Â  Â  this.gameState.ammo--;
Â  Â  Â  Â  Â  Â  this.gameState.canFire = false;
Â  Â  Â  Â  Â  Â  this.time.delayedCall(10, () => { this.gameState.canFire = true; }, [], this);

Â  Â  Â  Â  Â  Â  const maxThrowSpeed = 1000;Â 
Â  Â  Â  Â  Â  Â  const effectivePower = Math.max(20, this.gameState.power);
Â  Â  Â  Â  Â  Â  const velocityScale = effectivePower / 100;Â 
Â  Â  Â  Â  Â  Â  const velocityY = -(maxThrowSpeed * velocityScale);Â 
Â  Â  Â  Â  Â  Â  let newBalloon = this.gameState.projectiles.create(this.gameState.hand.x, this.gameState.hand.y, 'balloon_asset');
Â  Â  Â  Â  Â  Â  newBalloon.canDamage = true;
Â  Â  Â  Â  Â  Â  newBalloon.throwPower = effectivePower;
Â  Â  Â  Â  Â  Â  newBalloon.setScale(0.5).body.setCircle(15).setAllowGravity(true).setCollideWorldBounds(true);
Â  Â  Â  Â  Â  Â  newBalloon.body.onWorldBounds = true;
Â  Â  Â  Â  Â  Â  newBalloon.setVelocity(0, velocityY);
Â  Â  Â  Â  Â  Â  this.gameState.power = 0;Â 
Â  Â  Â  Â  Â  Â  this.gameState.powerDash.setVisible(false);
Â  Â  Â  Â  }
Â  Â  }
Â  Â Â 
Â  Â  hitCharacter(balloon, character) {
Â  Â  Â  Â  if (!balloon.canDamage) return;
Â  Â  Â  Â  if (balloon.active && character.body.enable) {Â 
Â  Â  Â  Â  Â  Â  const power = balloon.throwPower;

Â  Â  Â  Â  Â  Â  if (character.type === 'zombie' && (power < 10 || power > 40)) {
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  if (character.type === 'ghost' && (power < 30 || power > 70)) {
Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  if (character.type === 'ghost' && character.state !== 'pausing') return;Â 

Â  Â  Â  Â  Â  Â  const soundKey = `${character.type}_die`;
			const variedDeathSounds = ['zombie', 'witch', 'ghost'];

			if (variedDeathSounds.includes(character.type)) {
				this.sound.play(soundKey, {
					volume: 0.8,
					detune: Phaser.Math.Between(-400, 400)
				});
			} else {
				this.sound.play(soundKey, { volume: 0.8 });
			}
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  character.setTint(0xFF0000);Â 
Â  Â  Â  Â  Â  Â  this.time.delayedCall(100, () => { if (character.active) { character.clearTint(); } }, [], this);
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  balloon.destroy();Â 
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  character.body.enable = false;Â 

Â  Â  Â  Â  Â  Â  const spec = this.CHARACTER_SPECS[character.type];
Â  Â  Â  Â  Â  Â  if (character.type === 'bat') { this.gameState.ammo += spec.reward; }Â 
Â  Â  Â  Â  Â  Â  else { this.gameState.score += spec.points; }
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  if (character.type === 'ghost') {
Â  Â  Â  Â  Â  Â  Â  Â  this.GRAVE_POSITIONS[character.graveIndex].isOccupied = false;
Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: character, alpha: 0, scale: 0, duration: 250, ease: 'Power2',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => { character.destroy(); }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  } else if (character.type === 'zombie') {
Â  Â  Â  Â  Â  Â  Â  Â  character.setVelocity(0,0);
Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: character, alpha: 0, duration: 300,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => { character.destroy(); }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  } else if (character.type === 'witch') {
Â  Â  Â  Â  Â  Â  Â  Â  character.setVelocity(0,0);
Â  Â  Â  Â  Â  Â  Â  Â  character.setFlipY(true);
Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: character, y: character.y + 100, duration: 400, ease: 'Cubic.easeIn',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: character, alpha: 0, duration: 150,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => { character.destroy(); }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  } else { // This is the bat
Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.add({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: character,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alpha: 0,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  scale: 0,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  duration: 150,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ease: 'Power2',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const rewardPopup = this.add.image(character.x, character.y, 'reward').setScale(0.5).setAlpha(0).setDepth(100);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  this.tweens.createTimeline()
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .add({ targets: rewardPopup, alpha: 1, y: '-=20', duration: 200, ease: 'Power2' })
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .add({ targets: rewardPopup, alpha: 1, duration: 1000 })
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .add({Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  targets: rewardPopup, alpha: 0, duration: 1000, ease: 'Power2.In',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onComplete: () => { rewardPopup.destroy(); }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .play();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  character.destroy();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }
}

// --- Game Configuration ---
const config = {
Â  Â  type: Phaser.AUTO,Â 
Â  Â  render: { antialias: true, antialiasGL: true, pixelArt: true, canvas: { willReadFrequently: true } },
Â  Â  width: 720, height: 300,
Â  Â  scene: [TitleScene, GameScene],Â 
Â  Â  parent: 'game-outer-wrapper',
Â  Â  physics: {
Â  Â  Â  Â  default: 'arcade',
Â  Â  Â  Â  arcade: { gravity: { y: 600 }, debug: false } // Set to 'true' to see hurtboxes
Â  Â  },
};

const game = new Phaser.Game(config);
